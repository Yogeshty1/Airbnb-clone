export {};

<<<<<<< HEAD
import { LockManager } from "worker_threads";

=======
>>>>>>> 59e553cfc8d0195a1ae85d49435cad6265e2f87a
// lib.webworker has `WorkerNavigator` rather than `Navigator`, so conditionals use `onabort` instead of `onmessage`
type _Navigator = typeof globalThis extends { onabort: any } ? {} : Navigator;
interface Navigator {
    readonly hardwareConcurrency: number;
    readonly language: string;
    readonly languages: readonly string[];
<<<<<<< HEAD
    readonly locks: LockManager;
=======
>>>>>>> 59e553cfc8d0195a1ae85d49435cad6265e2f87a
    readonly platform: string;
    readonly userAgent: string;
}

declare global {
    interface Navigator extends _Navigator {}
    var Navigator: typeof globalThis extends { onabort: any; Navigator: infer T } ? T : {
        prototype: Navigator;
        new(): Navigator;
    };

    // Needs conditional inference for lib.dom and lib.webworker compatibility
    var navigator: typeof globalThis extends { onmessage: any; navigator: infer T } ? T : Navigator;
}
